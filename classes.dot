digraph "classes" {
rankdir=BT
charset="utf-8"
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.asp_encoding.ASPEncoding" [color="black", fontcolor="black", label="{ASPEncoding|val2 : str\lvalue : str\l|get_alp_encoding(facts_name: [str])\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.asp_result_parser.ASPResultEventModel" [color="black", fontcolor="black", label="{ASPResultEventModel|fact_symbol : list\lname : str\lpos : int\lresource : set\l|parse_clingo_event()\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.asp_result_parser.ASPResultTraceModel" [color="black", fontcolor="black", label="{ASPResultTraceModel|events : list\lmodel : list\lname : str\lscale_down_number : int\l|parse_clingo_trace()\lparse_clingo_val_assignement(syb: [clingo.symbol.Symbol])\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.asp_template.ASPTemplate" [color="black", fontcolor="black", label="{ASPTemplate|value : str\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.ASPTranslator" [color="black", fontcolor="black", label="{ASPTranslator|asp_model\l|from_decl_model(model: DeclModel, use_encoding: bool): TranslatedASPModel\lget_float_biggest_precision(model: DeclareParsedDataModel): int\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_generator.AspGenerator" [color="black", fontcolor="black", label="{AspGenerator|asp_custom_structure : Optional[AspResultLogModel \| None]\lasp_encoding : str\lasp_template : str\lclingo_output : list\lcustom_probabilities : Optional[typing.Optional[typing.List[float]]]\ldistributor_instance\ldistributor_type : typing.Literal['uniform', 'gaussian', 'custom']\lencode_decl_model : bool\lloc : Optional[float]\llp_model : Optional[TranslatedASPModel]\lpy_logger : Logger, RootLogger, NoneType\lscale : Optional[float]\ltraces_length : collections.Counter \| None, dict\l|compute_distribution()\lgenerate_asp_from_decl_model(encode: bool): str\lrun()\lto_xes(output_fn: str)\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.asp_result_parser.AspResultLogModel" [color="black", fontcolor="black", label="{AspResultLogModel|traces : typing.List[ASPResultTraceModel]\l|print_indent()\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_conformance_check.basic_conformance_checking_results.BasicConformanceCheckingResults" [color="black", fontcolor="black", label="{BasicConformanceCheckingResults|basic_conformance_checking_results : dict\lmodel_check_res : list\l|activations(trace_id: int, constr_id: int): int\lclean()\lfulfillments(trace_id: int, constr_id: int): int\lstate(trace_id: int, constr_id: int): bool\lviolations(trace_id: int, constr_id: int): int\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_model_discovery.basic_mp_declare_discovery.BasicDiscoveryResults" [color="black", fontcolor="black", label="{BasicDiscoveryResults|\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_conformance_check.basic_mp_declare_conformance_checking.BasicMPDeclareConformanceChecking" [color="black", fontcolor="black", label="{BasicMPDeclareConformanceChecking|act_cond : str \| None\lactivation : str \| None\lbasic_conformance_checking_results : Optional[BasicConformanceCheckingResults \| None]\lconstraint_checker\lmax_declare_cardinality : int\lmin_support : float\ltarget : str \| None\ltemplate_str : str \| None\ltime_cond : str \| None\ltrg_cond : str \| None\l|run(consider_vacuity: bool): BasicConformanceCheckingResults\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_model_discovery.basic_mp_declare_discovery.BasicMPDeclareDiscovery" [color="black", fontcolor="black", label="{BasicMPDeclareDiscovery|basic_discovery_results : Optional[BasicDiscoveryResults \| None]\lconstraint_checker\lmax_declare_cardinality : int \| None\lsupport : float\l|discover_constraint(log: LogAnalyzer, constraint: dict, consider_vacuity: bool)\lfilter_discovery(min_support: float, output_path: str): dict[str:dict[tuple[int, str]:CheckerResult]]\linit_discovery_result_instance()\lrun(consider_vacuity: bool, max_declare_cardinality: int, output_path: str): BasicDiscoveryResults\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_query_checking.basic_mp_declare_query_checking.BasicMPDeclareQueryChecking" [color="black", fontcolor="black", label="{BasicMPDeclareQueryChecking|act_cond : str \| None\lactivation : str \| None\lbasic_query_checking_results : Optional[BasicQueryCheckingResults \| None]\lconstraint_checker\lmax_declare_cardinality : int\lmin_support : float\ltarget : str \| None\ltemplate_str : str \| None\ltime_cond : str \| None\ltrg_cond : str \| None\l|filter_query_checking(queries): list[list[str]]\lquery_constraint(log: LogAnalyzer, constraint: dict, consider_vacuity: bool, min_support: float)\lrun(consider_vacuity: bool, template_str: str, max_declare_cardinality: int, activation: str, target: str, act_cond: str, trg_cond: str, time_cond: str, min_support: float): BasicQueryCheckingResults\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_query_checking.basic_mp_declare_query_checking.BasicQueryCheckingResults" [color="black", fontcolor="black", label="{BasicQueryCheckingResults|\l|}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.checker_result.CheckerResult" [color="black", fontcolor="black", label="{CheckerResult|num_activations\lnum_fulfillments\lnum_pendings\lnum_violations\lstate\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.conf_checking.ConformanceChecking" [color="black", fontcolor="black", label="{ConformanceChecking|consider_vacuity : bool\l|}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.constraint_checker.ConstraintCheck" [color="black", fontcolor="black", label="{ConstraintCheck|consider_vacuity : bool\l|check_trace_conformance(trace: dict, p_model: ProcessModel, consider_vacuity: bool): dict\l}", shape="record", style="solid"];
"src.declare4py.utility.custom_utility_dict.CustomUtilityDict" [color="black", fontcolor="black", label="{CustomUtilityDict|key_value : dict\l|to_json(pure): str\lupdate_props()\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclModel" [color="black", fontcolor="black", label="{DeclModel|CONSTRAINTS_TEMPLATES_PATTERN : str\lconstraints : list\ldeclare_model_lines : list\ldeclare_model_violate_constraints : list, list[str]\lparsed_model\lserialized_constraints : list\lviolate_constraints_all : bool\l|detect_declare_attr_value_type(value: str): DeclareModelAttributeType\lget_decl_model_constraints()\lis_constraint_template_definition(line: str): bool\lis_event_attributes_definition(line: str): bool\lis_event_name_definition(line: str): bool\lis_events_attrs_value_definition(line: str): bool\lparse(lines: [str])\lparse_from_file(filename: str): DeclModel\lparse_from_string(content: str, new_line_ctrl: str): DeclModel\lset_constraints()\lviolate_constraints(constraints_list: list[str])\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_translator.declare_constraint_resolver.DeclareModalConditionResolver2ASP" [color="black", fontcolor="black", label="{DeclareModalConditionResolver2ASP|is_encoded : bool\lnumber_scaler : int\l|condition_to_asp(name, cond, i, attrs)\lparse_data_cond_to_pycond(cond: str)\lparsed_condition(condition: typing.Literal['activation', 'correlation'], string: str)\lparsed_condition_2(condition: typing.Literal['activation', 'correlation'], string: str)\lresolve_to_asp(ct: DeclareModelTemplateDataModel, attrs: dict, idx: int)\lscale_number2int(num: [int | float]): int\ltree_conditions_to_asp(condition: typing.Literal['activation', 'correlation'], expression, cond_name: str, i, conditions_names, lp_st): typing.List[str] | None\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelAttributeType" [color="black", fontcolor="black", label="{DeclareModelAttributeType|name\l|}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelCoder" [color="black", fontcolor="black", label="{DeclareModelCoder|encoded_dict : dict\lmodel\l|decode_value(s: str): str\lencode(dpm_orig: DeclareParsedDataModel): DeclareParsedDataModel\lencode_attributes_list(attr_list: dict)\lencode_enum_list(s): str\lencode_event_name(s): str\lencode_event_type(s): str\lencode_str_list(lst: [str]): [str]\lencode_value(s): str\lparsed_condition(string: str)\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelConditionParserUtility" [color="black", fontcolor="black", label="{DeclareModelConditionParserUtility|\l|parse_data_cond(cond: str)\lparse_time_cond(condition)\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelEvent" [color="black", fontcolor="black", label="{DeclareModelEvent|attributes : dict[str, dict]\levent_type : str\lname : str\l|update_props()\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelTemplate" [color="black", fontcolor="black", label="{DeclareModelTemplate|is_binary : bool\lis_negative : bool\lname\lsupports_cardinality : bool\ltempl_str : str\l|get_binary_templates()\lget_negative_templates()\lget_positive_templates()\lget_template_from_string(template_str)\lget_unary_templates()\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelTemplateDataModel" [color="black", fontcolor="black", label="{DeclareModelTemplateDataModel|activities : Optional[str \| None], list\lcondition : Optional[[str] \| None], list\lcondition_line : str, str \| None\ltemplate : Optional[DeclareModelTemplate \| None]\ltemplate_line : str \| None, str\ltemplate_name : Optional[str \| None]\lviolate : bool\l|contains_interval_condition(): bool\lget_active_condition()\lget_conditions()\lget_target_condition()\lget_time_condition()\lset_conditions(cond_str: str)\lupdate_props()\l}", shape="record", style="solid"];
"src.declare4py.process_models.decl_model.DeclareParsedDataModel" [color="black", fontcolor="black", label="{DeclareParsedDataModel|attributes_list : dict[str, dict]\lencoded_model : Optional[DeclareModelCoder]\lencoder : Optional[DeclareModelCoder]\levents : dict[str, DeclareModelEvent]\ltemplate_constraints : list, dict\ltemplates : list[DeclareModelTemplateDataModel], list\l|add_attribute(event_name: str, attr_name: str)\ladd_attribute_value(attr_name: str, attr_type: DeclareModelAttributeType, attr_value: str)\ladd_event(name: str, event_type: str): None\ladd_template(line: str, template: DeclareModelTemplate, cardinality: str)\ldecode_value(name: str): str\lencode(): DeclareParsedDataModel\lupdate_props()\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.discovery.Discovery" [color="black", fontcolor="black", label="{Discovery|consider_vacuity : bool\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.distribution.Distributor" [color="black", fontcolor="black", label="{Distributor|\l|custom_distribution(min_num: int, max_num: int, traces_num: int, probabilities: [float])\ldistribution(min_num_events_or_mu: int | float, max_num_events_or_sigma: int | float, num_traces: int | float, dist_type: Literal['uniform', 'gaussian', 'custom'], custom_probabilities: Optional[List[float]])\lnormal_distribution(mu, sigma, num_traces: int)\luniform_distribution(min_num, max_num, traces_num: int)\l}", shape="record", style="solid"];
"src.declare4py.process_models.ltl_model.LTLModel" [color="black", fontcolor="black", label="{LTLModel|formula : Optional[str]\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_analyzer.LogAnalyzer" [color="black", fontcolor="black", label="{LogAnalyzer|binary_encoded_log : DataFrame, NoneType\lfrequent_item_sets : DataFrame, NoneType\llog : NoneType, EventLog, Optional[lg.EventLog \| None]\llog_length : NoneType\l|activities_log_projection(): list[list[str]]\lcompute_frequent_itemsets(min_support: float, dimension: str, algorithm: str, len_itemset: int): None\lget_binary_encoded_log(): pd.DataFrame\lget_log(): pm4py.objects.log.obj.EventLog\lget_log_alphabet_activities()\lget_log_alphabet_payload(): set[str]\lget_trace_keys(): list[tuple[int, str]]\llog_encoding(dimension: str): pd.DataFrame\lparse_xes_log(log_path: str): None\lresources_log_projection(): list[list[str]]\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.log_generator.LogGenerator" [color="black", fontcolor="black", label="{LogGenerator|log_length : int\lmax_events : int\lmin_events : int\l|}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPAbsence" [color="black", fontcolor="black", label="{MPAbsence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPAlternatePrecedence" [color="black", fontcolor="black", label="{MPAlternatePrecedence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPAlternateResponse" [color="black", fontcolor="black", label="{MPAlternateResponse|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPChainPrecedence" [color="black", fontcolor="black", label="{MPChainPrecedence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPChainResponse" [color="black", fontcolor="black", label="{MPChainResponse|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPChoice" [color="black", fontcolor="black", label="{MPChoice|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPExactly" [color="black", fontcolor="black", label="{MPExactly|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPExclusiveChoice" [color="black", fontcolor="black", label="{MPExclusiveChoice|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPExistence" [color="black", fontcolor="black", label="{MPExistence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPInit" [color="black", fontcolor="black", label="{MPInit|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPNotChainPrecedence" [color="black", fontcolor="black", label="{MPNotChainPrecedence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPNotChainResponse" [color="black", fontcolor="black", label="{MPNotChainResponse|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPNotPrecedence" [color="black", fontcolor="black", label="{MPNotPrecedence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPNotRespondedExistence" [color="black", fontcolor="black", label="{MPNotRespondedExistence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPNotResponse" [color="black", fontcolor="black", label="{MPNotResponse|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPPrecedence" [color="black", fontcolor="black", label="{MPPrecedence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPRespondedExistence" [color="black", fontcolor="black", label="{MPRespondedExistence|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.MPResponse" [color="black", fontcolor="black", label="{MPResponse|\l|get_check_result()\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.monitoring.Monitoring" [color="black", fontcolor="black", label="{Monitoring|\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.pm_task.PMTask" [color="black", fontcolor="black", label="{PMTask|log_analyzer\lprocess_model\l|run(): typing.Any\l}", shape="record", style="solid"];
"src.declare4py.process_models.process_model.ProcessModel" [color="black", fontcolor="black", label="{ProcessModel|activities : list\l|parse_from_file(model_path: str): T\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.query_checking.QueryChecking" [color="black", fontcolor="black", label="{QueryChecking|consider_vacuity : bool\l|}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.TemplateCheckers" [color="black", fontcolor="black", label="{TemplateCheckers|\l|get_template(template: DeclareModelTemplate, traces: dict, completed: bool, activities: [str], rules: dict): TemplateConstraintChecker\l}", shape="record", style="solid"];
"src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [color="black", fontcolor="black", label="{TemplateConstraintChecker|activities : list\lcompleted : bool\ldeclare_parser_utility\lrules : dict\ltraces : dict\l|get_check_result(): CheckerResult\l}", shape="record", style="solid"];
"src.declare4py.utility.trace_states.TraceState" [color="black", fontcolor="black", label="{TraceState|name\l|}", shape="record", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.TranslatedASPModel" [color="black", fontcolor="black", label="{TranslatedASPModel|attributes_values : list\lextra_asp_line : list\lfact_names : list\lis_encoded : bool\llines : list\lscale_number : int\ltemplates_s : list\lvalues_assignment : list\l|add_asp_line(line: str)\ladd_attribute_value_to_list(value: str)\ladd_template(name, ct: DeclareModelTemplateDataModel, idx: int, props: dict[str, dict])\ldefine_predicate(name: str, predicate_name: str, is_encoded: bool)\ldefine_predicate_attr(event_name: str, attr_name: str, is_encoded: bool)\lscale_number2int(num: [int | float]): int\lset_attr_value(attr: str, value: dict, is_encoded: bool)\lto_str()\l}", shape="record", style="solid"];
"src.declare4py.pm_tasks.basic_conformance_check.basic_mp_declare_conformance_checking.BasicMPDeclareConformanceChecking" -> "src.declare4py.pm_tasks.conf_checking.ConformanceChecking" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.basic_model_discovery.basic_mp_declare_discovery.BasicMPDeclareDiscovery" -> "src.declare4py.pm_tasks.discovery.Discovery" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.basic_query_checking.basic_mp_declare_query_checking.BasicMPDeclareQueryChecking" -> "src.declare4py.pm_tasks.query_checking.QueryChecking" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.conf_checking.ConformanceChecking" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.discovery.Discovery" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.log_generation.asp.asp_generator.AspGenerator" -> "src.declare4py.pm_tasks.log_generation.log_generator.LogGenerator" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.log_generation.log_generator.LogGenerator" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.monitoring.Monitoring" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.query_checking.QueryChecking" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="empty", arrowtail="none"];
"src.declare4py.process_models.decl_model.DeclModel" -> "src.declare4py.process_models.ltl_model.LTLModel" [arrowhead="empty", arrowtail="none"];
"src.declare4py.process_models.decl_model.DeclareModelEvent" -> "src.declare4py.utility.custom_utility_dict.CustomUtilityDict" [arrowhead="empty", arrowtail="none"];
"src.declare4py.process_models.decl_model.DeclareModelTemplateDataModel" -> "src.declare4py.utility.custom_utility_dict.CustomUtilityDict" [arrowhead="empty", arrowtail="none"];
"src.declare4py.process_models.decl_model.DeclareParsedDataModel" -> "src.declare4py.utility.custom_utility_dict.CustomUtilityDict" [arrowhead="empty", arrowtail="none"];
"src.declare4py.process_models.ltl_model.LTLModel" -> "src.declare4py.process_models.process_model.ProcessModel" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPAbsence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPAlternatePrecedence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPAlternateResponse" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPChainPrecedence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPChainResponse" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPChoice" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPExactly" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPExclusiveChoice" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPExistence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPInit" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPNotChainPrecedence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPNotChainResponse" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPNotPrecedence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPNotRespondedExistence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPNotResponse" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPPrecedence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPRespondedExistence" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.utility.template_checkers.template_checker.MPResponse" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="empty", arrowtail="none"];
"src.declare4py.pm_tasks.basic_model_discovery.basic_mp_declare_discovery.BasicDiscoveryResults" -> "src.declare4py.pm_tasks.basic_model_discovery.basic_mp_declare_discovery.BasicMPDeclareDiscovery" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="basic_discovery_results", style="solid"];
"src.declare4py.pm_tasks.basic_query_checking.basic_mp_declare_query_checking.BasicQueryCheckingResults" -> "src.declare4py.pm_tasks.basic_query_checking.basic_mp_declare_query_checking.BasicMPDeclareQueryChecking" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="basic_query_checking_results", style="solid"];
"src.declare4py.pm_tasks.log_analyzer.LogAnalyzer" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="log_analyzer", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.TranslatedASPModel" -> "src.declare4py.pm_tasks.log_generation.asp.asp_generator.AspGenerator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lp_model", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.TranslatedASPModel" -> "src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.ASPTranslator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="asp_model", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.TranslatedASPModel" -> "src.declare4py.pm_tasks.log_generation.asp.asp_translator.asp_translator.ASPTranslator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="asp_model", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.asp_result_parser.AspResultLogModel" -> "src.declare4py.pm_tasks.log_generation.asp.asp_generator.AspGenerator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="asp_custom_structure", style="solid"];
"src.declare4py.pm_tasks.log_generation.asp.asp_utils.distribution.Distributor" -> "src.declare4py.pm_tasks.log_generation.asp.asp_generator.AspGenerator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="distributor_instance", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelCoder" -> "src.declare4py.process_models.decl_model.DeclareParsedDataModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="encoded_model", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelCoder" -> "src.declare4py.process_models.decl_model.DeclareParsedDataModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="encoded_model", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelConditionParserUtility" -> "src.declare4py.utility.template_checkers.template_checker.TemplateConstraintChecker" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="declare_parser_utility", style="solid"];
"src.declare4py.process_models.decl_model.DeclareModelTemplate" -> "src.declare4py.process_models.decl_model.DeclareModelTemplateDataModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="template", style="solid"];
"src.declare4py.process_models.decl_model.DeclareParsedDataModel" -> "src.declare4py.process_models.decl_model.DeclModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parsed_model", style="solid"];
"src.declare4py.process_models.decl_model.DeclareParsedDataModel" -> "src.declare4py.process_models.decl_model.DeclareModelCoder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"src.declare4py.process_models.decl_model.DeclareParsedDataModel" -> "src.declare4py.process_models.decl_model.DeclareModelCoder" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="model", style="solid"];
"src.declare4py.process_models.process_model.ProcessModel" -> "src.declare4py.pm_tasks.pm_task.PMTask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="process_model", style="solid"];
"src.declare4py.utility.template_checkers.constraint_checker.ConstraintCheck" -> "src.declare4py.pm_tasks.basic_conformance_check.basic_mp_declare_conformance_checking.BasicMPDeclareConformanceChecking" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="constraint_checker", style="solid"];
"src.declare4py.utility.template_checkers.constraint_checker.ConstraintCheck" -> "src.declare4py.pm_tasks.basic_model_discovery.basic_mp_declare_discovery.BasicMPDeclareDiscovery" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="constraint_checker", style="solid"];
"src.declare4py.utility.template_checkers.constraint_checker.ConstraintCheck" -> "src.declare4py.pm_tasks.basic_query_checking.basic_mp_declare_query_checking.BasicMPDeclareQueryChecking" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="constraint_checker", style="solid"];
}
